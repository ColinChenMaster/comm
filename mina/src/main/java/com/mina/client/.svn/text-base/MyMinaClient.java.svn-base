package com.project.utils.mina.client;

import java.net.ConnectException;
import java.net.InetSocketAddress;
import java.util.Map;

import org.apache.mina.core.RuntimeIoException;
import org.apache.mina.core.future.ConnectFuture;
import org.apache.mina.core.session.IoSession;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
import org.apache.mina.filter.codec.textline.TextLineCodecFactory;
import org.apache.mina.transport.socket.SocketConnector;
import org.apache.mina.transport.socket.nio.NioSocketConnector;

import com.project.service.socket.cache.InitializationClient00;
import com.project.utils.xml.SystemConfig00;

public class MyMinaClient {
    public SocketConnector socketConnector;  
    
    /** 
     * 缺省连接超时时间 
     */  
    public static final int DEFAULT_CONNECT_TIMEOUT = 10;  
  
    public String HOST = "127.0.0.1";  
  
    public int PORT = 8080;  
  
    public MyMinaClient(String host,int port) {
    	this.HOST = host;
    	this.PORT = port;
        init();  
    }  
  
    public void init() {  
        socketConnector = new NioSocketConnector();  
  
        // 长连接  
        //socketConnector.getSessionConfig().setKeepAlive(true);  
        socketConnector.setConnectTimeoutMillis(DEFAULT_CONNECT_TIMEOUT);  
        socketConnector.getSessionConfig().setReaderIdleTime(DEFAULT_CONNECT_TIMEOUT);  
        socketConnector.getSessionConfig().setWriterIdleTime(DEFAULT_CONNECT_TIMEOUT);  
        socketConnector.getSessionConfig().setBothIdleTime(DEFAULT_CONNECT_TIMEOUT);  
        socketConnector.getFilterChain().addLast("codec", new ProtocolCodecFilter(new TextLineCodecFactory()));  
        ClientIoHandler ioHandler = new ClientIoHandler();  
        socketConnector.setHandler(ioHandler);  
    }  
  
    /**
     * 信息发送
     * @param msg
     */
    public String sendMessage(final String message) {
        InetSocketAddress addr = new InetSocketAddress(HOST, PORT);  
        ConnectFuture cf = socketConnector.connect(addr);
        SystemConfig00 config = new SystemConfig00();
        Map<String,String> map = config.findNodeMap();
        String msg = null;
        int j = Integer.valueOf(map.get("wait_ss"))*10;
        try {  
        	System.out.println("客户端请求命令：" + message);
            cf.awaitUninterruptibly();
            IoSession session = cf.getSession();
            session.write(message);
            int i = 1;
            while(true){
            	try{
            		Thread.sleep(100);
            	}catch(Exception e){
            		e.printStackTrace();
            	}
            	msg = String.valueOf(InitializationClient00.getInstance().getMsgMap().get(session.getId()));
            	System.out.println(i+"次内容："+msg);
            	if((msg != null && !msg.equals("null")&& !msg.equals("")) || i > j){
            		System.out.println("取得消息SESSION:ID="+session.getId());
            		break;
            	}
            	i++;
            }
            InitializationClient00.getInstance().getMsgMap().remove(session.getId());
        } catch (RuntimeIoException e) { 
            if (e.getCause() instanceof ConnectException) {  
                try {  
                    if (cf.isConnected()) {  
                        cf.getSession().close(true); 
                    }  
                } catch (RuntimeIoException e1) {
                	e1.printStackTrace();
                }  
            }
            e.printStackTrace();
        } 
        return msg;
    }  
    
    public SocketConnector getSocketConnector() {  
        return socketConnector;  
    }  
  
    public void setSocketConnector(SocketConnector socketConnector) {  
        this.socketConnector = socketConnector;  
    }   
}   